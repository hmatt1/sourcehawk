name: Release
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Github Ref'
        required: false
        default: 'main'
      draft:
        description: 'Is the release a draft?'
        required: false
        default: 'false'
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: 'false'
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Setup Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: 8
          server-id: ossrh
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_PRIVATE_KEY }}
          gpg-passphrase: SONATYPE_GPG_PASSPHRASE
      - name: Set Maven Project Version
        id: set_maven_project_version
        shell: bash
        run: |
          RELEASE_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1 | tr -d '\r\n')
          [[ "$RELEASE_VERSION" == *"-SNAPSHOT" ]] && RELEASE_VERSION="${RELEASE_VERSION%"-SNAPSHOT"}" && ./mvnw --batch-mode versions:set -D removeSnapshot || true
          [[ "$(git tag -l $RELEASE_VERSION)" == "$RELEASE_VERSION" ]] && echo "Tag $RELEASE_VERSION already exists" && exit 1
          echo ::set-output name=RELEASE_VERSION::$RELEASE_VERSION
      - name: Build Maven Project and Deploy Release
        if: success()
        run: ./mvnw --batch-mode deploy -D ci.deploy -D ci.release
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_GPG_PASSPHRASE: ${{ secrets.SONATYPE_GPG_PASSPHRASE }}
      - name: Archive Native Image JAR
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: native-image-jar
          path: exec/target/*-native-image.jar
      - name: Aggregate Coverage Reports
        id: aggregate_coverage_reports
        if: success()
        run: echo ::set-output name=JACOCO_XML_REPORT_PATHS::$(find . -name "jacoco.xml" -printf '%P\n' | tr '\r\n' ',')
      - name: Generate Changelog
        if: success()
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        with:
          futureRelease: ${{ format('v{0}', steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          output: CHANGELOG.md
          releaseBranch: ${{ github.event.inputs.ref }}
          stripGeneratorNotice: true
          token: ${{ secrets.GITHUB_TOKEN }}
          usernamesAsGithubLogins: true
      - name: Tag
        if: success()
        run: |
          git config user.name "$GIT_USERNAME" && git config user.email "$GIT_EMAIL"
          git tag -a "v$RELEASE_VERSION" -m "Release v$RELEASE_VERSION created by @$GITHUB_ACTOR"
          git push origin --tags
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          RELEASE_VERSION: ${{ steps.set_maven_project_version.outputs.RELEASE_VERSION }}
      - name: Create Release
        if: success()
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}', steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          release_name: ${{ format('{0} {1}', github.event.repository.name, steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          body_path: CHANGELOG.md
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
      - name: Record Release Asset Upload URL
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_asset_upload.url
      - name: Archive Release Asset Upload URL
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: release_asset_upload.url
      - name: Upload Sourcehawk Linux Executable
        if: success()
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./distributions/linux/target/sourcehawk
          asset_name: sourcehawk-linux-x86_64
          asset_content_type: application/octet-stream
      - name: Upload Sourcehawk Debian Package
        if: success()
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./distributions/debian/target/sourcehawk.deb
          asset_name: sourcehawk-linux-x86_64.deb
          asset_content_type: application/octet-stream
      - name: Publish Github Pages
        if: success()
        continue-on-error: true
        uses: jamesives/github-pages-deploy-action@3.7.1
        with:
          COMMIT_MESSAGE: ${{ format('Publishing github pages for release version {0}', steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: gh-pages
  build-mac-native-image:
    runs-on: macos-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: native-image-jar
          path: build
      - name: Rename Native Image JAR
        working-directory: build
        run: mv *.jar native-image.jar
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release
      - name: Expose Release Asset Upload URL
        id: expose_release_asset_upload_url
        working-directory: release
        run: echo ::set-output name=RELEASE_ASSET_UPLOAD_URL::$(cat release_asset_upload.url)
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Setup GraalVM
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm-version: 20.1.0.java8
      - name: Setup GraalVM Native Image Tool
        run: gu install native-image
      - name: Build Mac Native Image
        if: success()
        working-directory: build
        run: native-image -cp native-image.jar -H:+ReportExceptionStackTraces --report-unsupported-elements-at-runtime --no-fallback
      - name: Upload Sourcehawk Mac Executable
        if: success()
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.expose_release_asset_upload_url.outputs.RELEASE_ASSET_UPLOAD_URL }}
          asset_path: build/sourcehawk
          asset_name: sourcehawk-darwin-x86_64
          asset_content_type: application/octet-stream
#  build-windows-native-image:
#    runs-on: windows-latest
#    needs: build
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: native-image-jar
#          path: build
#      - name: Rename Native Image JAR
#        working-directory: build
#        run: ren *.jar native-image.jar
#      - uses: actions/download-artifact@v2
#        with:
#          name: release
#          path: release
#      - name: Expose Release Asset Upload URL
#        id: expose_release_asset_upload_url
#        working-directory: release
#        run: echo ::set-output name=RELEASE_ASSET_UPLOAD_URL::$(cat release_asset_upload.url)
#      - name: Setup GraalVM Native Image and Visual C Build Tools
#        run: |
#          Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.1.0/graalvm-ce-java11-windows-amd64-20.1.0.zip -OutFile 'graal.zip'
#          Expand-Archive -path 'graal.zip' -destinationpath '.'
#          graalvm-ce-java11-20.1.0\bin\gu.cmd install native-image
#          choco install visualstudio2017-workload-vctools
#      - name: Build Windows Native Image
#        if: success()
#        shell: cmd
#        run: |
#          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
#          graalvm-ce-java11-20.1.0\bin\native-image -cp .\build\native-image.jar -H:+ReportExceptionStackTraces --report-unsupported-elements-at-runtime
#        env:
#          JAVA_HOME: ./graalvm-ce-java11-20.1.0
#      - name: Upload Sourcehawk Windows Executable
#        if: success()
#        continue-on-error: true
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.read_release_upload_url.outputs.upload_url }}
#          asset_path: build/sourcehawk.exe
#          asset_name: sourcehawk-windows-x86_64
#          asset_content_type: application/octet-stream
